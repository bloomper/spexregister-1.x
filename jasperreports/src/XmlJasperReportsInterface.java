import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;

/**
 * An XML JasperReports interface; Takes XML data from the standard input and
 * uses JRXmlDataSource to generate reports in the specified output format using
 * the specified compiled JasperReports design.
 */
public class XmlJasperReportsInterface {
	private static final String TYPE_PDF = "pdf";
	private static final String TYPE_XML = "xml";
	private static final String TYPE_RTF = "rtf";
	private static final String TYPE_XLS = "xls";
	private static final String TYPE_CSV = "csv";

	private String outputType = null;
	private String compiledDesign = null;
	private String selectCriteria = null;

	/**
	 * Constructor.
	 *
	 * @param outputType The output type
	 * @param compiledDesign The compiled design
	 * @param selectCriteria The select criteria
	 */
	private XmlJasperReportsInterface(String outputType, String compiledDesign, String selectCriteria) {
		this.outputType = outputType;
		this.compiledDesign = compiledDesign;
		this.selectCriteria = selectCriteria;
	}

	/**
	 * Main method.
	 *
	 * @param args The arguments
	 */
	public static void main(String[] args) {
		String outputType = null;
		String compiledDesign = null;
		String selectCriteria = null;

		if (args.length != 3) {
			printUsage();
			return;
		}

		for (int k = 0; k < args.length; ++k) {
			if (args[k].startsWith("-o")) {
				outputType = args[k].substring(2);
			} else if (args[k].startsWith("-f")) {
				compiledDesign = args[k].substring(2);
			} else if (args[k].startsWith("-x")) {
				selectCriteria = args[k].substring(2);
			}
		}

		XmlJasperReportsInterface jasperInterface = new XmlJasperReportsInterface(outputType, compiledDesign, selectCriteria);
		if (!jasperInterface.generateReport()) {
			System.exit(1);
		}
	}

	/**
	 * Generate report.
	 *
	 * @return The report
	 */
	private boolean generateReport() {
		try {
			JasperPrint jasperPrint = JasperFillManager.fillReport(compiledDesign, null, new CustomXmlDataSource(System.in, selectCriteria));

			if (TYPE_PDF.equals(outputType)) {
				JasperExportManager.exportReportToPdfStream(jasperPrint, System.out);
			} else if (TYPE_XML.equals(outputType)) {
				JasperExportManager.exportReportToXmlStream(jasperPrint, System.out);
			} else if (TYPE_RTF.equals(outputType)) {
				JRRtfExporter rtfExporter = new JRRtfExporter();
				rtfExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				rtfExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, System.out);
				rtfExporter.exportReport();
			} else if (TYPE_XLS.equals(outputType)) {
				JRXlsExporter xlsExporter = new JRXlsExporter();
				xlsExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				xlsExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, System.out);
				xlsExporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
				xlsExporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
				xlsExporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
				xlsExporter.exportReport();
			} else if (TYPE_CSV.equals(outputType)) {
				JRCsvExporter csvExporter = new JRCsvExporter();
				csvExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				csvExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, System.out);
				csvExporter.exportReport();
			} else {
				printUsage();
			}
		} catch (JRException e) {
			e.printStackTrace();
			return false;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	/**
	 * Print usage.
	 */
	private static void printUsage() {
		System.out.println("XmlJasperReportsInterface usage:");
		System.out.println("\tjava XmlJasperReportsInterface -oOutputType -fCompiledDesign -xSelectExpression < input.xml > report\n");
		System.out.println("\tOutput types:\t\tpdf | xml | rtf | xls | csv");
		System.out.println("\tCompiled design:\tFilename of the compiled JasperReports design");
		System.out.println("\tSelect expression:\tXPath expression that specifies the select criteria");
		System.out.println("\t\t\t\t(See net.sf.jasperreports.engine.data.JRXmlDataSource for further information)");
		System.out.println("\tStandard input:\t\tXML input data");
		System.out.println("\tStandard output:\tReport generated by JasperReports");
	}
}
